version: '3.9'
services:
  proxy:
    image: traefik:latest
    networks:
      - monitoring
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8080
        mode: ingress
    command:
      - '--entrypoints.web.address=:80'
      - '--entrypoints.websecure.address=:443'
      - '--api'
      - '--accesslog=true'
      - '--log.level=DEBUG'
      - '--metrics'
      - '--metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000'
      - '--providers.docker'
      - '--providers.docker.swarmMode'
      - '--providers.docker.watch'
      - '--providers.file.watch'
      - '--providers.file.directory=/etc/traefik/dynamic_conf'
      - '--providers.docker.exposedbydefault=false'
    volumes:
      - ./certs:/letsencrypt:ro
      - ./configs/traefik-certs.yml:/etc/traefik/dynamic_conf/conf.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TIMEZONE}
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.proxy.entrypoints=web"
        - "traefik.http.services.${STACK_NAME}_proxy.loadbalancer.server.port=8080"
      env_file:
        - ./configs/stack.env

  webapp:
    image: httpd:latest
    networks:
      - monitoring
    volumes:
      - ./webapp/:/usr/local/apache2/htdocs/:ro
    deploy:
      mode: replicated
      replicas: 3
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=monitoring"
        - "traefik.http.routers.webapp.entrypoints=websecure"
        - "traefik.http.routers.webapp.tls=true"
        - "traefik.http.routers.webapp.rule=Host(`${APP_URI}`)"
        - "traefik.http.services.${STACK_NAME}_webapp.loadbalancer.server.port=80"
      restart_policy:
        condition: on-failure
      env_file:
        - ./configs/stack.env

  prometheus:
    image: prom/prometheus:latest
    networks:
      - monitoring
    user: root
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./configs/prom-config.yml:/etc/prometheus/prometheus.yml
      - ./metrics/:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.entrypoints=web"
        - "traefik.http.services.${STACK_NAME}_prometheus.loadbalancer.server.port=9090"
      restart_policy:
        condition: on-failure
      env_file:
        - ./configs/stack.env

  cadvisor:
    image: docker
    entrypoint: ["/bin/sh","-c"]
    networks:
      - monitoring
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PARENT={{.Task.Name}}
      - CHILDNAME={{.Service.Name}}_sidecar.{{.Node.ID}}.{{.Task.ID}}
      - CADVISOR_VERSION=latest
    command: 
    - |
      exec docker run -i --rm --network="container:$${PARENT}" \
            --volume=/cgroup:/cgroup:ro \
            --volume=/:/rootfs:ro \
            --volume=/var/run:/var/run:ro  \
            --volume=/sys:/sys:ro  \
            --volume=/var/lib/docker/:/var/lib/docker:ro \
            --volume=/dev/disk/:/dev/disk:ro \
            --name $${CHILDNAME} \
            --privileged \
            --device=/dev/kmsg \
            gcr.io/cadvisor/cadvisor:$${CADVISOR_VERSION}
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.cadvisor.entrypoints=web"
        - "traefik.http.services.${STACK_NAME}_cadvisor.loadbalancer.server.port=8080"
    env_file:
      - ./configs/stack.env

  node-exporter:
    image: prom/node-exporter:latest
    networks:
      - monitoring
    command:
      - '--path.procfs=/host/proc'       
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host'       
      - '--collector.filesystem.ignored-mount-points="^(/rootfs|/host|)/(sys|proc|dev|host|etc)($$|/)"'       
      - '--collector.filesystem.ignored-fs-types="^(sys|proc|auto|cgroup|devpts|ns|au|fuse\.lxc|mqueue)(fs|)$$"' 
    volumes:
      - /proc:/host/proc:ro       
      - /sys:/host/sys:ro       
      - /:/rootfs:ro
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.node-exporter.entrypoints=web"
        - "traefik.http.services.${STACK_NAME}_node-exporter.loadbalancer.server.port=9100"
      env_file:
        - ./configs/stack.env

  grafana:
    image: grafana/grafana:latest
    networks:
      - monitoring
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.rule=Host(`${GRAF_URI}`)"
        - "traefik.http.services.${STACK_NAME}_grafana.loadbalancer.server.port=3000"
      restart_policy:
          condition: on-failure
      env_file:
        - ./configs/stack.env

networks:
  monitoring: 
    external: true